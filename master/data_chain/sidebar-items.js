initSidebarItems({"constant":[["MAX_BYTES","Maximum allowed size for a Structured Data to grow to"]],"enum":[["BlockIdentifier","Dummy data identifiers for this crate"],["Data","This is the data types routing handles in the public interface"],["DataIdentifier","An identifier to address a data chunk."]],"fn":[["create_link_descriptor","Descriptor is the xored group members starting with base of 0000..:32 This process is faster than hash and means group can be unordered which is beneficial under heavy churn and out of order links being sent."]],"mod":[["chain","A block is a type that contains a `BlockIdentifier` and a `Proof`. These can be data blocks or links"],["data","Data types"],["error","Error types for this crate"]],"struct":[["DataChain","Created by holder of chain, can be passed to others as proof of data held. This object is verifiable if : The last validation contains the majority of current close group OR on network restart the nodes all must try and restart on previous names. They can continue any validation of the holder of a chain. This requires nodes to always restart as last ID and if there was no restart they are rejected at vault level. If there was a restart then the nodes should validate and continue. N:B this means all nodes can use a named directory for data store and clear if they restart as a new id. This allows clean-up of old data cache directories."],["ImmutableData","An immutable chunk of data."],["NodeBlock","If data block then this is sent by any group member when data is `Put`, `Post` or `Delete`. If this is a link then it is sent with a `churn` event. A `Link` is a nodeblock that each member must send each other in times of churn. These will not accumulate but be `ManagedNode`  to `ManagedNode` messages in the routing layer"],["PlainData","Plain data with a name and a value."],["StructuredData","Mutable structured data."]]});